name: PR Management

on:
  pull_request:
    types: [opened, synchronize, reopened, closed, review_requested]

permissions:
  pull-requests: write
  contents: write

env:
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  SLACK_CHANNEL: "#acs-2930-group-2"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  auto-request-reviewers:
    name: Auto Request Reviewers
    runs-on: ubuntu-latest
    steps:
      - name: Auto-Assign Reviewers
        uses: hmarr/auto-approve-action@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          review-message: "Automated review request."

  auto-merge:
    name: Auto Merge PR
    runs-on: ubuntu-latest
    needs: [auto-request-reviewers]
    if: github.event.pull_request.merged == false
    steps:
      - name: Wait for Checks to Complete
        uses: poseidon/wait-for-status-checks@v0.6.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          interval: 10s   # Polling interval
          timeout: 300s   # 5-minute timeout
          delay: 5s       # Initial wait time before polling

      - name: Enable Auto-Merge
        uses: pascalgn/automerge-action@v0.15.6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          merge-method: squash

  close-failing-prs:
    name: Close Failing PRs
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Comment and Close PR
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: "ðŸš¨ This PR has failed checks and is being closed automatically. Please fix issues and reopen."
            });
            github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              state: "closed"
            });

  label-pr-status:
    name: Label PR Based on Status
    runs-on: ubuntu-latest
    steps:
      - name: Apply Labels Based on PR Status
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const reviews = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            const approved = reviews.data.some(review => review.state === "APPROVED");
            let labelToAdd = approved ? "Ready to Merge" : "Needs Work";

            const checks = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha
            });

            const failingChecks = checks.data.check_runs.length > 0 && 
              checks.data.check_runs.some(check => check.conclusion === "failure");
            if (failingChecks) {
              labelToAdd = "Blocked";
            }

            await github.rest.issues.setLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              labels: [labelToAdd]
            });

  slack-notifications:
    name: Notify Slack
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true || failure()
    steps:
      - name: Notify Slack on PR Merged or Failed
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: ${{ env.SLACK_CHANNEL }}
          SLACK_MESSAGE: |
            ðŸš€ PR <${{ github.event.pull_request.html_url }}|#${{ github.event.pull_request.number }}> **${{ github.event.action }}**
